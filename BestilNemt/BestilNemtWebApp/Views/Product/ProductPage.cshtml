@using WebClient.BestilNemtServiceRef
@model global::WebClient.Models.ProductPartOrderViewModel

@{
    ViewBag.Title = "Product Page";
    var proxy = new BestilNemtServiceClient();
    var product = @Model.Product;
    // get the shop from Session, if it is null make a new one
    var shop = (Shop)Session["Shop"];
}
<h1>@product.Name</h1>
@*Show a product image*@
<div id="ProductPicture">
    <img alt="" height="350" src="/Images/ProductPictures/@product.ImgPath" width="350">
</div>
<div id="ProductInformation">
    @* The div of the buymodul *@
    <div id="BuyModul">
        @{
            // If the shop is null, do nothing
            if (shop != null)
            {
                // Get the warehouse by the product id and the shop id
                var warehouse2 = proxy.GetWarehouseByProductId(product.Id, shop.Id);
                // If the warehouse is not null
                if (warehouse2 != null)
                {
                    // Get the saving id
                    var savingId = warehouse2.SavingId;
                    // Get the price for the product
                    var price = product.Price;
                    // If the saving id is not null
                    if (savingId != null)
                    {
                        // Get the saving
                        var saving = proxy.GetSaving(savingId.Value);
                        // get the percent
                        var percent = (decimal)saving.SavingPercent;
                        // Calculate the new price
                        var newPrice = price - (price * percent / 100);
                        // Show the price
                        <p>Pris: @price kr - @percent % = @newPrice kr</p>
                    }
                    else
                    {
                        // Show the price whitout a saving
                        <p>Pris: @price kr</p>
                    }
                    // get the login from session and create it if it is null
                    if (Session["Login"] == null)
                    {
                        var loginObj = new Login();
                        Session["Login"] = loginObj;
                    }
                    var login = (Login)Session["Login"];

                    @* Make a form to add a product to a cart *@
        using (Html.BeginForm("AddProductToCart", "Product", FormMethod.Post))
        {
            // Get the max amount
            var maxAmount = warehouse2.Stock;
            // If the max amount if higher than 100, set it to 100
            if (maxAmount > 100)
            {
                maxAmount = 100;
            }
            // If there is no items in stock show a message
            if (maxAmount == 0)
            {
                <p>Ingen varer på lager</p>
            }
            else
            {
                // Show a dropdown menu from 1 to the amount in stock
                var cart = (Cart)Session["ShoppingCart"];
                // If the product is allready added, check decent the amount
                maxAmount = cart.PartOrders.Where(partOrder => product.Id == partOrder.Product.Id).Aggregate(maxAmount, (current, partOrder) => current - partOrder.Amount);
                // If the max amount is 0 or under show a message
                if (maxAmount <= 0)
                {
                    <p>Det maksimale antal af dette produkt er allerede tilføjet til kurven</p>
                }
                else
                {
                    // Get the person id from login and check for if user is signed in
                    if (login.PersonId == 0)
                    {
                        <p>Du skal være logget på for at kunne tilføje et produkt til kurven</p>
                    }
                    else
                    {
                        // Create the selecter
                        <select name="Amount">
                            @* Loop for every possibility of the selector from 1 to the limit *@
                            @for (var i = 1; i <= maxAmount; i++)
                            {
                                <option value="@i"> @i </option>
                            }
                        </select>
                        // Create a new line
                        <br />
                        // Hide the product id
                        @Html.HiddenFor(x => x.Product.Id)
                        // Show a button the add the product with a given amount to the cart
                        <button type="submit" onclick="alert('@Model.Product.Name er tilføjet til kurven');">Tilføj til kurv</button>
                            }
                        }
                    }
                }
            }
        }
        }
    </div>
    @* Show a description box *@
    <div id="descriptionBox">
        <h3>Produkt information</h3>
        <p>@product.Description</p>
    </div>
</div>